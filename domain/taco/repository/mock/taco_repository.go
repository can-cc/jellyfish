// Code generated by MockGen. DO NOT EDIT.
// Source: domain/taco/repository/taco_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	taco "github.com/fwchen/jellyfish/domain/taco"
	repository "github.com/fwchen/jellyfish/domain/taco/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListTacos mocks base method
func (m *MockRepository) ListTacos(userID string, filter repository.ListTacoFilter) ([]taco.Taco, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTacos", userID, filter)
	ret0, _ := ret[0].([]taco.Taco)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTacos indicates an expected call of ListTacos
func (mr *MockRepositoryMockRecorder) ListTacos(userID, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTacos", reflect.TypeOf((*MockRepository)(nil).ListTacos), userID, filter)
}

// InsertTaco mocks base method
func (m *MockRepository) InsertTaco(taco *taco.Taco) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTaco", taco)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTaco indicates an expected call of InsertTaco
func (mr *MockRepositoryMockRecorder) InsertTaco(taco interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTaco", reflect.TypeOf((*MockRepository)(nil).InsertTaco), taco)
}

// FindTaco mocks base method
func (m *MockRepository) FindTaco(tacoID string) (*taco.Taco, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaco", tacoID)
	ret0, _ := ret[0].(*taco.Taco)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTaco indicates an expected call of FindTaco
func (mr *MockRepositoryMockRecorder) FindTaco(tacoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaco", reflect.TypeOf((*MockRepository)(nil).FindTaco), tacoID)
}

// UpdateTaco mocks base method
func (m *MockRepository) UpdateTaco(taco *taco.Taco) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaco", taco)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaco indicates an expected call of UpdateTaco
func (mr *MockRepositoryMockRecorder) UpdateTaco(taco interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaco", reflect.TypeOf((*MockRepository)(nil).UpdateTaco), taco)
}
