// Code generated by MockGen. DO NOT EDIT.
// Source: domain/visitor/repository/visitor_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	visitor "github.com/fwchen/jellyfish/domain/visitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockRepository) Save(visitor *visitor.Visitor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", visitor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockRepositoryMockRecorder) Save(visitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), visitor)
}

// FindUserPasswordHash mocks base method
func (m *MockRepository) FindUserPasswordHash(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPasswordHash", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserPasswordHash indicates an expected call of FindUserPasswordHash
func (mr *MockRepositoryMockRecorder) FindUserPasswordHash(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPasswordHash", reflect.TypeOf((*MockRepository)(nil).FindUserPasswordHash), name)
}
